import numpy as np
from scipy.spatial import cKDTree
import os
import torchaudio

def compute_coverage(real_clean, fake_clean):
    """
    Compute the coverage of real_clean waveforms by fake_clean waveforms.
    
    :param real_clean: numpy array of real clean waveforms, shape (n_samples, waveform_length)
    :param fake_clean: numpy array of fake clean waveforms generated by the model, shape (m_samples, waveform_length)
    :return: coverage score, the proportion of real_clean waveforms that have at least one close match in fake_clean
    """
    # Create KD-Trees for fast nearest neighbor search
    fake_tree = cKDTree(fake_clean)
    
    # Initialize a set to store the indices of fake_clean that are closest to any real_clean
    nearest_fake_indices = set()
    
    # Iterate over each real_clean waveform and find its nearest neighbor in fake_clean
    for real_waveform in real_clean:
        dist, index = fake_tree.query(real_waveform)
        if isinstance(index, np.ndarray):
            index = index.item()
        nearest_fake_indices.add(index)

    # Compute the coverage score
    coverage_score = len(nearest_fake_indices) / len(fake_clean)
    return coverage_score

# Example usage:
# Assuming real_clean_waveforms and fake_clean_waveforms are loaded or generated arrays
# Join current working directory with the specified path
real_clean_path = os.path.join(os.getcwd(), 'data/test_clean_sampled/')
fake_clean_path = os.path.join(os.getcwd(), 'data/fake_clean_test_1000e/')

real_clean_filenames = sorted([file for file in os.listdir(real_clean_path) if file.endswith('.wav')])
fake_clean_filenames = sorted([file for file in os.listdir(fake_clean_path) if file.endswith('.wav')])

real_clean_waveforms = np.array([torchaudio.load(os.path.join(real_clean_path, file))[0].numpy() for file in real_clean_filenames]).squeeze()
fake_clean_waveforms = np.array([torchaudio.load(os.path.join(fake_clean_path, file))[0].numpy() for file in fake_clean_filenames]).squeeze()

print("Real clean waveforms shape:", real_clean_waveforms.shape)
print("Fake clean waveforms shape:", fake_clean_waveforms.shape)

coverage_score = compute_coverage(real_clean_waveforms, fake_clean_waveforms)
print("Coverage Score:", coverage_score)
